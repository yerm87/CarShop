{"version":3,"file":"js/5.js","sources":["webpack:///./src/components/loginComponent/LoginComponent.css","webpack:///./src/components/loginComponent/LoginComponent.css?6472","webpack:///src/components/loginComponent/LoginComponent.js"],"sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".LoginComponent__form__3BkZc {\\r\\n    width: 25%;\\r\\n    margin: 0 auto;\\r\\n    font-family: 'Rubik';\\r\\n    padding-top: 20px;\\r\\n}\\r\\n\\r\\n.LoginComponent__form__3BkZc label, .LoginComponent__form__3BkZc input {\\r\\n    display: block;\\r\\n}\\r\\n\\r\\n.LoginComponent__form__3BkZc label {\\r\\n    padding: 15px 0 5px 0;\\r\\n    font-weight: 600;\\r\\n}\\r\\n\\r\\n.LoginComponent__form__3BkZc input {\\r\\n    width: 100%;\\r\\n    border-radius: 8px;\\r\\n    font-size: 1.1em;\\r\\n    padding-left: 10px;\\r\\n    -webkit-box-sizing: border-box;\\r\\n            box-sizing: border-box;\\r\\n}\\r\\n\\r\\n.LoginComponent__form__3BkZc p {\\r\\n    color: var(--mainRed);\\r\\n}\", \"\"]);\n// Exports\nexports.locals = {\n\t\"form\": \"LoginComponent__form__3BkZc\"\n};\nmodule.exports = exports;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--5-1!../../../node_modules/postcss-loader/src/index.js??postcss!./LoginComponent.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar id = \"!!../../../node_modules/css-loader/dist/cjs.js??ref--5-1!../../../node_modules/postcss-loader/src/index.js??postcss!./LoginComponent.css\";\nvar update = api(id, content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","import React, { Component } from 'react';\r\nimport classes from './LoginComponent.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../reduxStore/authentication/Actions';\r\nimport Input from '../UIElements/inputs/Inputs';\r\nimport axios from 'axios';\r\nimport Spinner from '../UIElements/spinner/Spinner';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass LoginComponent extends Component {\r\n    state={\r\n        elements: {\r\n            email: {\r\n                type: 'email',\r\n                value: '',\r\n                valid: true,\r\n                touched: false,\r\n                errorMessage: ''\r\n            },\r\n            password: {\r\n                type: 'password',\r\n                value: '',\r\n                valid: true,\r\n                touched: false,\r\n                errorMessage: ''\r\n            }\r\n        },\r\n        formIsValid: true\r\n    }\r\n\r\n    onChangeHandler = (event, current) => {\r\n        \r\n        const copyElements = {\r\n            ... this.state.elements\r\n        }\r\n\r\n        copyElements[current.type].touched = true;\r\n        copyElements[current.type].value = event.target.value;\r\n\r\n        this.setState({\r\n            elements: copyElements\r\n        });\r\n    }\r\n\r\n    validationData = (element) => {\r\n        const copyElements = {\r\n            ...this.state.elements\r\n        }\r\n        if(copyElements[element.type].value === ''){\r\n            copyElements[element.type].valid = false;\r\n            copyElements[element.type].errorMessage = 'Field cannot be empty';\r\n        } else {\r\n            copyElements[element.type].valid = true;\r\n            copyElements[element.type].errorMessage = '';\r\n            \r\n        }\r\n\r\n        this.setState({\r\n            elements: copyElements\r\n        })\r\n    }\r\n\r\n    login = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(this.state.elements.email.value !== '' && this.state.elements.password.value !== ''){\r\n            this.props.init();\r\n            axios.post('/auth_user', {\r\n                email: this.state.elements.email.value,\r\n                password: this.state.elements.password.value\r\n            }).then(response => {\r\n                console.log(response.data);\r\n                const copyElements = {\r\n                    ...this.state.elements\r\n                }\r\n\r\n                if(response.data === 0){\r\n                    this.props.removeSpinner();\r\n                    copyElements['email'].valid = false;\r\n                    copyElements['password'].valid = false;\r\n    \r\n                    this.setState({\r\n                        elements: copyElements,\r\n                        formIsValid: false\r\n                    });\r\n                } else if(response.data !== 0){\r\n                    this.props.userWasLoggedIn();\r\n\r\n                    copyElements['email'].valid = true;\r\n                    copyElements['password'].valid = true;\r\n                    copyElements['email'].errorMessage = '';\r\n                    copyElements['password'].errorMessage = '';\r\n\r\n                    this.setState({\r\n                        elements: copyElements,\r\n                        formIsValid: true\r\n                    })\r\n                }\r\n                this.props.getEmail();\r\n            })\r\n        } else {\r\n            const copyElements = {\r\n                ...this.state.elements\r\n            }\r\n            copyElements['email'].valid = false;\r\n            copyElements['password'].valid = false;\r\n            copyElements['email'].touched = true;\r\n            copyElements['password'].touched = true;\r\n            copyElements['email'].errorMessage = 'Field cannot be empty';\r\n            copyElements['password'].errorMessage = 'Field cannot be empty';\r\n\r\n            this.setState({\r\n                elements: copyElements\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const arrayOfInputs = [];\r\n\r\n        for(let prop in this.state.elements){\r\n            arrayOfInputs.push(this.state.elements[prop]);\r\n        }\r\n\r\n        const inputElements = arrayOfInputs.map(current => \r\n                <Input element={current.type}\r\n                       value={current.value}\r\n                       valid={current.valid}\r\n                       touched={current.touched}\r\n                       error={current.errorMessage}\r\n                       onChangeHandler={(event) => this.onChangeHandler(event, current)}\r\n                       onBlurHandler={() => this.validationData(current)} />);\r\n\r\n        let component = (\r\n            <form className={classes.form}\r\n                  onSubmit={(event) => this.login(event)}>\r\n                {!this.state.formIsValid ? <p>Login or password are not correct</p> : null}\r\n                {inputElements}\r\n                <Input element='login' />\r\n            </form>\r\n        )\r\n\r\n        if(this.props.loading){\r\n            component = <Spinner />;\r\n        }\r\n\r\n        if(this.props.userIsLoggedIn){\r\n            component = <Redirect to='sell_car' />;\r\n        }\r\n\r\n        return component\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userIsLoggedIn: state.authReducer.userIsLoggedIn,\r\n        loading: state.authReducer.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userWasLoggedIn: () => dispatch(actions.userWasLoggedIn()),\r\n        init: () => dispatch(actions.init()),\r\n        removeSpinner: () => dispatch(actions.removeSpinner()),\r\n        getEmail: () => dispatch(actions.getEmail())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginComponent);"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;;;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;;;AACA;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AARA;AAgBA;AAjBA;AACA;AAqBA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AACA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AA9IA;AACA;AAgJA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;;;;A","sourceRoot":""}